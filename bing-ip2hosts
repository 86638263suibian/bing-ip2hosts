#!/bin/bash
#
# bing-ip2hosts - Enumerate hostnames from Bing.com for an IP address.
# Bing.com is Microsoft's search engine which has an IP: search parameter.
#
# Copyright (C) 2019 Andrew Horton aka urbanadventurer
# Homepage: http://www.morningstarsecurity.com/research/bing-ip2hosts
#
# License: GPLv3
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


VERSION=0.6
TMP_DIR=/tmp
QUIET=0
OUTPUT_IP=0
HTTP_PREFIX=0
IP=
PREFIX=
DEBUG=0
STOP_AFTER_PAGES=5
LANG=en-us

trap ctrl_c INT

function ctrl_c() {
  echo -e "\n* ^C"

  # clean up tmp files
  if [[ $DEBUG == 0 ]]; then
    rm -f "$out"
  fi

  show_hosts
  exit 1
}


function banner() {

N="\e[0m"  #NORMAL
G="\e[32m" #GREEN
W="\e[97m" #WHITE
R="\e[31m" #RED


BANNER="
$G  m,                $N   .,recon:,        ,,
$G  #####             $N  ]##\"\"^^\"%##m    %##b
$G  ####b             $N  ]##      \`##b
$G  ####b             $N  ]##       ##    i##    @#b,######m       ,######m ##b
$G  ####b 1mw,        $N  ]##MMM####      i##    ]###\`    %##     ###\`    \`@##
$G  ####b  1#####Nw,  $N  ]##\`\`    @#b    i##    ]##       ###   ###       j##
$G  ####i   %########[$N  ]##       @##   i##    ]##       ###   ##g       j##
$G  ####n      2#####[$N  ]##      @##    i##    ]##       ###   @##       {##
$G  ####g  ,#########b$N  ]##   ,,e###    j##    ]##       ###    7##m,,,s#M##
$G  #############M^   $N  'WWWWWW%b^       ii    'nn       nn*      \`1337\` g##
$G  ##########\"      $N                                                    G##
$G    \"%##\"         $N                                            @#Gmmem###G
  ,i             $G   ,s2e,    $N ##                                  \`\`\`\`
   \`            $G   \"\`   %#$N    ##                             T#
  ]#   ]#,#M5@#p $G        #b  $N #H#H%@#     s#M5O#o   ,#MSSM  W@##W=  s#SSW
  ]#   j#p    ^#p$G      ,#M   $N ##    @#   ##'   'O#  S#,      ]#     #b
  ]#   j#      #M$G    ,#M     $N ##    @#   #o     O#    \"SXm   ]#      ^\"@#
  ]#   j##,  ,## $G  ,#2       $N ##    @#   7#.   .#O  ,   ]#   ]#Q       ,#s
  ]#   j######'  $G  #######x  $N ##    @#    s#####o    ####^    #Tt    ####^
       j#
$N       j#         $W bing-ip2hosts ($VERSION) by Andrew Horton @urbanadventurer
$N       j#         $W https://morningstarsecurity.com/research/bing-ip2hosts
$N                  $W https://github.com/urbanadventurer/bing-ip2hosts$N
"

echo -e "$BANNER"
}

function show_hosts() {
  if [[ $QUIET == 0 ]]; then
    echo
  fi

  uniq_hosts=`cat "$all_hosts" | cut -d '/' -f 3 | tr '[:upper:]' '[:lower:]' | sort | uniq`

  if [[ $DEBUG == 0 ]]; then
    rm -f "$all_hosts"
  fi

  if [[ $OUTPUT_IP == 1 ]]; then
    PREFIX="$IP,"
  fi

  if [[ $HTTP_PREFIX == 1 ]]; then
    PREFIX="$PREFIX""http://"
  fi

  for h in `echo "$uniq_hosts"`
  do
    echo "$PREFIX$h"
  done

  if [[ ! -z "$OUTPUT_FILE" ]]; then
    for h in `echo "$uniq_hosts"`
    do
      echo "$PREFIX$h" >> "$OUTPUTFILE"
    done
  fi

}

if [[ -z "$1" ]] || [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
clear
banner

echo -e "bing-ip2hosts is a Bing.com web scraper that discovers websites by IP address.
Use for OSINT and discovering attack-surface of penetration test targets.

Find hostnames that share an IP address with your target which can be a hostname or an IP address.
This uses the Bing.com feature of seaching by IP address, e.g. \"IP:40.112.72.205\".

Usage: $0 [OPTIONS] IP|hostname

OPTIONS are:
-o FILE\tOutput hostnames to FILE.
-m NUM\tStop after NUM scraped pages return no new results (Default: $STOP_AFTER_PAGES).
-q\tQuiet. Disable output except for final results.
-t DIR\tUse this directory instead of /tmp.
-i\tCSV output. Outputs the IP and hostname on each line, separated by a comma.
-p\tURL Output. Outputs URLs rather than hostnames.
"
exit 1
fi

while getopts "o:m:qt:ip" optionName; do
  case "$optionName" in
    o) OUTPUT_FILE=$OPTARG;;
    m) STOP_AFTER_PAGES=$OPTARG;;
    q) QUIET=1;;
    t) TMP_DIR="$OPTARG";;
    i) OUTPUT_IP=1;;
    p) HTTP_PREFIX=1;;
[?]) echo "Error"; exit 1;;
esac
done

shift $(($OPTIND -1))

if [[ -z "$1" ]]; then
  echo "Missing IP address or hostname." >&2
  exit 1
fi

# initialize outputfile
if [[ ! -z "$OUTPUT_FILE" ]]; then
  touch "$OUTPUT_FILE"
  if [[ ! -w "$OUTPUT_FILE" ]]; then
    echo "Cannot write to $OUTPUT_FILE." >&2
    exit 1
  fi
fi

# Create TMP_DIR if necessary
if [[ ! -d "$TMP_DIR" ]]; then
  if [[ "$QUIET" = 0 ]]; then
    mkdir -v -p "$TMP_DIR"
  else
    mkdir -p "$TMP_DIR"
  fi
  if [[ ! "$?" = 0 ]]; then
    echo "Invalid TMP Directory: $TMP_DIR." >&2
    exit 1
  fi
fi

if [[ $QUIET = 0 ]]; then
  clear
  banner
fi

animation="/-\|"
page=0
last_page_check=
results_count=1
uniq_hosts=0
single_page=
results_removed=
declare -a scrape_results

stop_sequence="0"
for ((i = 0; i < (($STOP_AFTER_PAGES-1)); i++)); do stop_sequence+=" 0"; done

# if the parameter looks like an IP go ahead, otherwise resolve it
if [[ `echo "$1" | egrep  "(([0-9]+\.){3}[0-9]+)|\[[a-f0-9:]+\]"`  ]]; then
  IP="$1"
else
  # IP=`resolveip -s "$1"`
  IP=`nslookup "$1" | egrep "^Address: \w+\.\w+\.\w+\.\w+$" | tail -1 | awk '{ print $2 }'`
  #  dig -t a treshna.com  +short
  if [ "$IP" == "" ]; then
    echo "Cannot resolve $1 to an IP" >&2
    exit 1
  fi
fi

all_hosts=`mktemp -p $TMP_DIR -t bing-ip2hosts.tmp.XXXXXX`

while [[ -z "$last_page_check" ]] && [[ -n "$results_count" ]] && [[ -z "$single_page" ]]; do

  if [[ $QUIET == 0 ]]; then
    echo -ne "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b"
    echo -en "[${animation: $(( $page % 4 )) :1}][ $IP | Scraping page $((page + 1)) | Results: $results_count | Found $uniq_hosts ]"
  fi

  url="https://www.bing.com/search?q=ip%3A$IP+.&qs=n&first=${page}0&FORM=PERE&setlang=$LANG"
  out=`mktemp -p "$TMP_DIR" -t bing-ip2hosts.tmp.XXXXXX`

  wget --quiet --no-check-certificate --output-document "$out" "$url"

  last_page_check=`egrep -o '<span class="sb_count">[0-9]+-([0-9]+) of (\1) results' $out`
  results_count=`egrep -o '<span class="sb_count">[^<]+' $out|cut -d '>' -f 2|cut -d ' ' -f 1-3`
  single_page=`egrep -o '<span class="sb_count">[0-9] results' $out`
  results_removed=`egrep -o '>Some results have been removed<' $out`

  # no captcha support or detection
  # pages will contain "Typing the characters in the picture above helps us ensure that a person, not a program, is performing a search"

  vhosts=`cat "$out"| egrep -o "<h2><a href=\"[^\"]+" $out |cut -d '"' -f 2`
  old_uniq_hosts=$uniq_hosts
  uniq_hosts=`cat "$all_hosts" | cut -d '/' -f 3 | tr '[:upper:]' '[:lower:]' | sort | uniq | wc -l`

  if [[ "$DEBUG" == 1 ]]; then
    echo
    echo "[debug] Page: $page"
    echo
    echo "Results page checks:"
    echo "[debug] Results Count: $results_count"
    echo "[debug] Last Page: $last_page_check"
    echo "[debug] Single Page: $single_page"
    echo "[debug] Results Removed: $results_removed"

    echo "Counting results:"
    echo "[debug] uniq_hosts = $uniq_hosts"
    echo "[debug] old_uniq_hosts = $old_uniq_hosts"
    echo "[debug] Found $new_results new results"
    echo "[debug] scrape_results array ${scrape_results[@]}"
  fi

  echo -e "$vhosts" >> "$all_hosts"

  # how many new results did we get
  new_results=$(( uniq_hosts - old_uniq_hosts ))
  scrape_results+=($new_results)

  if [[ ${scrape_results[@]} =~ $stopsequence ]]; then
    echo -e "\n${R}Stopping after $STOP_AFTER_PAGES without new results.$N" >&2
    break
  fi

  # clean up tmp files
  if [[ $DEBUG == 0 ]]; then
    rm -f "$out"
  fi

  let page=$page+1
done

show_hosts
